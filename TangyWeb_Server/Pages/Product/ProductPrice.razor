@page "/product/price/{Id:int}"
@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository

<h3 class="card-title text-primary mb-3 ms-3">Product Price Management</h3>
 @if (IsLoading) 
 {
    <div class="text-center"><img src="images/loading.gif"></div>
 }
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>Category: @Product.Category.Name</span> <br/>
                <span>Description: @((MarkupString)Product.Description)</span>

            </div>    
        </div>
        <div class="col-1">
            <img src="@Product.ImageUrl" class="w-100" />
        </div>
    </div>

    <SfGrid 
        @ref=productPriceGrid 
        DataSource="@ProductPrices" 
        AllowPaging="true"
        AllowFiltering="true"
        AllowSorting="true"
        Toolbar="@(new List<string>{"Add","Edit","Update","Delete","Cancel"})"
    >
        <GridEditSettings 
            AllowAdding="true" 
            AllowEditing="true" 
            AllowDeleting="true" 
            ShowDeleteConfirmDialog="true"
        />
        <GridEvents 
            OnActionBegin="ActionHandler" 
            TValue="ProductPriceDTO"
        />
        <GridFilterSettings
            Type="FilterType.Menu"
        />
        <GridSortSettings
            AllowUnsort="false"
        >
            <GridSortColumns>
                <GridSortColumn
                    Field="Price"
                    Direction="SortDirection.Ascending"
                />
            </GridSortColumns>
        </GridSortSettings>
        <GridPageSettings 
            PageSize="5" 
            PageCount="5" 
            PageSizes="true"
        />
        <GridColumns>
            <GridColumn 
                IsPrimaryKey="true" 
                AllowAdding="false" 
                Field=@nameof(ProductPriceDTO.Id) 
                HeaderText="ID"
            >
            </GridColumn>
            <GridColumn 
                Field=@nameof(ProductPriceDTO.Size) 
                HeaderText="Size"
            >
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList 
                    DataSource=@SizeList 
                    TItem="string" 
                    TValue="string" @bind-Value="((context as ProductPriceDTO).Size)"
                    >
                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn 
                Field=@nameof(ProductPriceDTO.Price) 
                HeaderText="Price" 
                Format="C2"
            >
            </GridColumn>
            <GridColumn 
                HeaderText="Manage Records" 
                Width="150"
            >
                <GridCommandColumns>
                    <GridCommandColumn 
                        Type="CommandButtonType.Edit" 
                        ButtonOption="@(new CommandButtonOptions() 
                        { IconCss = "e-icons e-edit", 
                        CssClass = "e-flat" })"
                    />
                    <GridCommandColumn 
                        Type="CommandButtonType.Delete" 
                        ButtonOption="@(new CommandButtonOptions() 
                        { IconCss = "e-icons e-delete", 
                        CssClass = "e-flat" })"
                        />
                        <GridCommandColumn 
                        Type="CommandButtonType.Save" 
                        ButtonOption="@(new CommandButtonOptions() 
                        { IconCss = "e-icons e-update", 
                        CssClass = "e-flat" })"
                        />
                    <GridCommandColumn 
                        Type="CommandButtonType.Cancel" 
                        ButtonOption="@(new CommandButtonOptions() 
                        { IconCss = "e-icons e-cancel-icon", 
                        CssClass = "e-flat" })"
                        />
                </GridCommandColumns>
              </GridColumn>
        </GridColumns>
    </SfGrid>
}       





@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private SfGrid<ProductPriceDTO> productPriceGrid;

    IEnumerable<string> SizeList = new List<string>() 
    {
        "Small","Medium","Large","800gr ","1600gr", "2400gr"
    }; 

    public IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender){
            IsLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductPrices = await _productPriceRepository.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }

    }

    public async Task ActionHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if(args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductId = Id;
            if (args.Action == "Add")
            {
                await _productPriceRepository.Create(args.Data);
                ProductPrices = await _productPriceRepository.GetAll(Id);
                await productPriceGrid.Refresh();
            }
            else if (args.Action == "Edit")
            {
                await _productPriceRepository.Update(args.Data);
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productPriceRepository.Delete(args.Data.Id);
            productPriceGrid.Refresh();
        }

    }
}
