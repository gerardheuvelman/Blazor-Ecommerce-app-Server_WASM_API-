@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JsRuntime

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="/category/create" class="btn btn-primary form-control" >
            Add New Category
        </a>
    </div>
    <div class="col-12" >
        @if (Categories.Any()) 
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Categories)
                    {
                        <tr>
                            <td>@category.Name</td>
                            <td>
                                <NavLink href=@($"category/edit/{category.Id}") class="btn btn-primary">Edit</NavLink>
                                <button @onclick="()=>HandleDelete(category.Id)" class="btn btn-danger">Delete</button>
                                <_DeleteConfirmation IsParentComponentProcessing=@IsLoading ConfirmationChanged=@ConfirmDelete_Click Type="Category"  FriendlyName=@category.Name />

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading) 
            {
                // Loading gif
            <div class="text-center"><img src="images/loading.gif"></div>
            }
            else
            {
                // loaded but no records
                <p>No records found...</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private int DeleteCategoryId { get; set; } = 0;

    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }

    }

    private async Task LoadCategories() 
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();

    }

    private void HandleDelete(int Id)
    {
        DeleteCategoryId = Id;
        _JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteCategoryId != 0) 
        {
            await _categoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await _JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
